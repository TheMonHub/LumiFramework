# Macro to import targets based on library type (shared/static)
macro(import_targets type)
    if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/Lumi-${type}-targets.cmake")
        set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE
            "Lumi ${type} libraries were requested but not found")
        set(${CMAKE_FIND_PACKAGE_NAME}_FOUND OFF)
        return()
    endif()
    include("${CMAKE_CURRENT_LIST_DIR}/Lumi-${type}-targets.cmake")
endmacro()

# Main logic for find_package
if(NOT TARGET Lumi::Lumi)
    set(type "")

    if(DEFINED LUMI_SHARED_LIBS)
        if(LUMI_SHARED_LIBS)
            set(type "shared")
        else()
            set(type "static")
        endif()
    elseif(BUILD_SHARED_LIBS AND EXISTS "${CMAKE_CURRENT_LIST_DIR}/Lumi-shared-targets.cmake")
        set(type "shared")
    elseif(EXISTS "${CMAKE_CURRENT_LIST_DIR}/Lumi-static-targets.cmake")
        set(type "static")
    else()
        # Fallback if neither specific type requested, try shared, then static
        # hared if available,
        # then falls back to static if only static is installed.
        # This part might need careful testing.
        set(type "shared") # Default to shared if no strong preference
        if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/Lumi-shared-targets.cmake" AND EXISTS "${CMAKE_CURRENT_LIST_DIR}/Lumi-static-targets.cmake")
             set(type "static")
        endif()
    endif()

    import_targets(${type})
    check_required_components(Lumi) # Check if all required components are found
    message(STATUS "-- Found ${type} Lumi (version ${${CMAKE_FIND_PACKAGE_NAME}_VERSION})")
endif()