# This file is a template used by CMake for other projects to find Lumi.

# Prevent multiple inclusions
if (Lumi_FOUND)
  return()
endif()

set(Lumi_FOUND FALSE) # Assume not found until confirmed

# Set Lumi version variables
set(Lumi_VERSION @PROJECT_VERSION@)
set(Lumi_MAJOR_VERSION @PROJECT_VERSION_MAJOR@)
set(Lumi_MINOR_VERSION @PROJECT_VERSION_MINOR@)
set(Lumi_PATCH_VERSION @PROJECT_VERSION_PATCH@)

# Determine installation prefix
get_filename_component(Lumi_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
get_filename_component(Lumi_INSTALL_PREFIX "${Lumi_CMAKE_DIR}/../../.." ABSOLUTE)

# Initialize variables for consumers
set(Lumi_LIBRARIES "")

# Set the base modules directory
set(Lumi_MODULES_DIR "${Lumi_INSTALL_PREFIX}/@CMAKE_INSTALL_LIBDIR@/cmake/@LUMI_VERSIONED_SUBDIR@/modules")

set(Lumi_DEFINITIONS "")

# --- Main logic to find and configure Lumi ---

# Include the generated targets file
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")

    set(Lumi_FOUND TRUE)

    # Helper variable to store the chosen default target
    set(_lumi_chosen_default_target "")

    # Priority for setting Lumi_LIBRARIES:
    # 1. Monolithic Static (Lumi::LumiStatic) - if it exists
    # 2. No aggregate target, user must link individual components

    if (TARGET Lumi::LumiStatic)
        set(_lumi_chosen_default_target Lumi::LumiStatic)
    endif()

    if (_lumi_chosen_default_target)
        set(Lumi_LIBRARIES "${_lumi_chosen_default_target}")
        get_target_property(Lumi_DEFINITIONS "${_lumi_chosen_default_target}" INTERFACE_COMPILE_DEFINITIONS)
        message(STATUS "-- Found Lumi framework (version ${Lumi_VERSION}). Default target: ${_lumi_chosen_default_target}")

        # Set up module path for consuming projects
        get_target_property(_lumi_module_files "${_lumi_chosen_default_target}" INTERFACE_SOURCES)
        if(_lumi_module_files)
            list(APPEND CMAKE_MODULE_PATH "${Lumi_MODULES_DIR}")
        endif()
    else()
        message(STATUS [[Found Lumi framework targets (version ${Lumi_VERSION}). No aggregate Lumi target (Lumi::LumiStatic) found.
Please link specific components (e.g., Lumi::LumiStaticCore, Lumi::LumiStaticWindow).]])

        # Fallback for definitions from a common component if no aggregate target is available
        if (TARGET Lumi::LumiStaticCore)
            get_target_property(Lumi_DEFINITIONS Lumi::LumiStaticCore INTERFACE_COMPILE_DEFINITIONS)
            get_target_property(_lumi_module_files Lumi::LumiStaticCore INTERFACE_SOURCES)
            if(_lumi_module_files)
                list(APPEND CMAKE_MODULE_PATH "${Lumi_MODULES_DIR}")
            endif()
        endif()
    endif()

else()
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "lumi-targets.cmake not found. Lumi may not have been installed or built correctly.")
    set(Lumi_FOUND FALSE)
endif()

# Mark variables as advanced
mark_as_advanced(
    Lumi_FOUND
    Lumi_LIBRARIES
    Lumi_DEFINITIONS
    Lumi_MODULES_DIR
)