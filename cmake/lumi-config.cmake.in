# This file is a template used by CMake for other projects to find Lumi.

# Prevent multiple inclusions
if (Lumi_FOUND)
  return()
endif()

set(Lumi_FOUND FALSE) # Assume not found until confirmed

# Set Lumi version variables
set(Lumi_VERSION @PROJECT_VERSION@)
set(Lumi_MAJOR_VERSION @PROJECT_VERSION_MAJOR@)
set(Lumi_MINOR_VERSION @PROJECT_VERSION_MINOR@)
set(Lumi_PATCH_VERSION @PROJECT_VERSION_PATCH@)

# Determine installation prefix
get_filename_component(Lumi_CMAKE_DIR "${CMAKE_CURRENT_LIST_FILE}" DIRECTORY)
get_filename_component(Lumi_INSTALL_PREFIX "${Lumi_CMAKE_DIR}/../../.." ABSOLUTE)

# Initialize variables for consumers.
set(Lumi_LIBRARIES "") # Holds the default target alias (e.g., Lumi::LumiShared, Lumi::LumiStatic)

# Set the base include directory for all Lumi headers.
set(Lumi_INCLUDE_DIRS "${Lumi_INSTALL_PREFIX}/@CMAKE_INSTALL_INCLUDEDIR@/@LUMI_VERSIONED_SUBDIR@")

set(Lumi_DEFINITIONS "") # Initialize compile definitions

# --- Main logic to find and configure Lumi ---

# Include the generated targets file. This makes Lumi::LumiShared, Lumi::LumiStatic, Lumi::LumiStaticCore etc. available.
if(EXISTS "${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")
    include("${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")

    set(Lumi_FOUND TRUE) # At least the targets file was found

    # Helper variable to store the chosen default target
    set(_lumi_chosen_default_target "")

    # Priority for setting Lumi_LIBRARIES and Lumi_DEFINITIONS:
    # 1. Monolithic Static (Lumi::LumiStatic) - if it exists.
    # 2. Monolithic Shared (Lumi::LumiShared) - if it exists and static wasn't chosen.
    # 3. No aggregate target, user must link individual components.

    if (TARGET Lumi::LumiStatic) # <-- STATIC FIRST
        set(_lumi_chosen_default_target Lumi::LumiStatic)
    elseif (TARGET Lumi::LumiShared) # <-- THEN SHARED
        set(_lumi_chosen_default_target Lumi::LumiShared)
    endif()

    if (_lumi_chosen_default_target)
        set(Lumi_LIBRARIES "${_lumi_chosen_default_target}")
        get_target_property(Lumi_DEFINITIONS "${_lumi_chosen_default_target}" INTERFACE_COMPILE_DEFINITIONS)
        message(STATUS "-- Found Lumi framework (version ${Lumi_VERSION}). Default target: ${_lumi_chosen_default_target}")
    else()
        # No aggregate target found (e.g., only individual component targets like Lumi::LumiStaticCore were built/installed)
        message(STATUS [[-- Found Lumi framework targets (version ${Lumi_VERSION}). No aggregate Lumi target (Lumi::LumiShared or Lumi::LumiStatic) found.
Please link specific components (e.g., Lumi::LumiStaticCore, Lumi::LumiSharedCore).]])

        # Fallback for definitions from a common component if no aggregate target is available
        if (TARGET Lumi::LumiStaticCore)
            get_target_property(Lumi_DEFINITIONS Lumi::LumiStaticCore INTERFACE_COMPILE_DEFINITIONS)
        elseif (TARGET Lumi::LumiSharedCore)
            get_target_property(Lumi_DEFINITIONS Lumi::LumiSharedCore INTERFACE_COMPILE_DEFINITIONS)
        endif()
    endif()

else()
    # If lumi-targets.cmake isn't found at all, then Lumi truly isn't installed.
    set(${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE "lumi-targets.cmake not found. Lumi may not have been installed or built correctly.")
    set(Lumi_FOUND FALSE)
endif()

# Process standard find_package arguments
find_package_handle_standard_args(Lumi
                                REQUIRED_VARS Lumi_FOUND
                                VERSION_VAR Lumi_VERSION
                                )

# Mark variables as advanced so they don't clutter the CMake GUI by default
mark_as_advanced(Lumi_FOUND Lumi_INCLUDE_DIRS Lumi_LIBRARIES Lumi_DEFINITIONS)