# lumi-config.cmake.in (Template for Lumi's CMake package configuration)
# This file is installed as lumi-config.cmake and found by find_package(Lumi ...).

# Initializes CMake package configuration.
# Sets up internal variables like @PACKAGE_PREFIX_DIR@ and handles versioning logic.
@PACKAGE_INIT@

# Determines Lumi's installation root directory based on this script's location.
get_filename_component(Lumi_INSTALL_PREFIX "@PACKAGE_PREFIX_DIR@" ABSOLUTE)

# Defines standard variables for consumers (e.g., Lumi_INCLUDE_DIRS, Lumi_LIB_DIRS).
# Modern CMake projects typically link directly to imported targets instead.
set(Lumi_INCLUDE_DIRS "${Lumi_INSTALL_PREFIX}/@CMAKE_INSTALL_INCLUDEDIR@")
set(Lumi_LIB_DIRS "${Lumi_INSTALL_PREFIX}/@CMAKE_INSTALL_LIBDIR@")

# Custom variables based on Lumi's specific installation structure.
set(Lumi_MODULE_DIR "${Lumi_INSTALL_PREFIX}/include/@LUMI_VERSIONED_SUBDIR@")
set(Lumi_CMAKEDIR "${Lumi_INSTALL_PREFIX}/@CMAKE_INSTALL_DATADIR@/cmake/@PROJECT_NAME_LOWER_CASE@-@PROJECT_VERSION_MAJOR@.@PROJECT_VERSION_MINOR@")

# Loads the exported CMake targets (e.g., Lumi::Core, Lumi::Window).
# These targets are generated by Lumi's install process and define how to link against Lumi's libraries.
if(NOT EXISTS "${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")
    message(FATAL_ERROR "Lumi installation corrupted: lumi-targets.cmake not found at ${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")
endif()
include("${CMAKE_CURRENT_LIST_DIR}/lumi-targets.cmake")


# Handles standard find_package arguments (VERSION, REQUIRED, QUIET, COMPONENTS).
# This macro sets Lumi_FOUND and ensures all requested components are available.
find_package_handle_standard_args(Lumi
                                  REQUIRED_VARS
                                    Lumi_INCLUDE_DIRS
                                    Lumi_LIB_DIRS
                                  VERSION_VAR PROJECT_VERSION # Uses version from LumiConfigVersion.cmake
                                  HANDLE_COMPONENTS)

# If Lumi is found and components were requested, list the found components.
if(Lumi_FOUND AND Lumi_FIND_COMPONENTS)
    set(Lumi_FOUND_COMPONENTS "")
    foreach(_comp ${Lumi_FIND_COMPONENTS})
        if(TARGET Lumi::${_comp})
            list(APPEND Lumi_FOUND_COMPONENTS ${_comp})
        endif()
    endforeach()
    if(Lumi_FOUND_COMPONENTS)
        message(STATUS "Found Lumi components: ${Lumi_FOUND_COMPONENTS}")
    endif()
endif()

# Provides status messages to the user during CMake configuration.
if(Lumi_FOUND)
    if(NOT Lumi_FIND_QUIETLY)
        message(STATUS "Found Lumi ${PROJECT_VERSION} (installed at ${Lumi_INSTALL_PREFIX})")
        message(STATUS "  - Include directories: ${Lumi_INCLUDE_DIRS}")
        message(STATUS "  - Library directories: ${Lumi_LIB_DIRS}")
        message(STATUS "  - CMake config directory: ${Lumi_CMAKEDIR}")
    endif()
else()
    if(Lumi_FIND_REQUIRED)
        message(FATAL_ERROR "Could not find Lumi. Ensure it is installed correctly and its CMake config is discoverable (e.g., via CMAKE_PREFIX_PATH).")
    else()
        if(NOT Lumi_FIND_QUIETLY)
            message(STATUS "Could not find Lumi.")
        endif()
    endif()
endif()

# Hides internal variables from CMake GUI, making it cleaner for users.
mark_as_advanced(
    Lumi_CMAKE_DIR
    Lumi_INSTALL_PREFIX
    Lumi_INCLUDE_DIRS
    Lumi_LIB_DIRS
    Lumi_MODULE_DIR
    Lumi_CMAKEDIR
)
